Pre-Presentation Reminders
--------------------------

1. When enabling screen share - be sure to check 'share my audio’ for the video
2. Set audio to 50% on Study-iMac
3. Disable notifications
4. Share the chrome tab on full-screen
5. When annotating - use the full width pencil on black
6. Put laptop on the right of the monitor (to avoid looking completely away from the screen) - Use this for the Q&A
7. Need to record the audio!!!
8. Set amphetamine on laptop

C++20 + Lua = Flexibility
-------------------------

<start audio recording>

Hello and good morning, good afternoon or good evening depending on where you are - my name is Jim Pascoe and today we are going to talk about combining C++20 with Lua. This is a major update of a talk I gave at CppOnSea 2020, so if you’ve seen the CppOnSea talk then, don’t worry, there is plenty of new content, if you haven’t seen my CppOnSea talk, then great you get it all fresh.

A few items to note - the slides are online and this is the URL, so if you want to follow along from the comfort of your own browser then please do so. You can change the theme by clicking on the hamburger icon. Also, I’ve linked to relevant sources of further information, so do click around. And, this is the GitHub link for the example code which accompanies the talk. More about that later. If you would like to ask a question, please do so in the Q&A panel - I'll answer them as they pop up - its possibly a bit more natural that way.

Overview

What is the purpose of this talk? In a nutshell, it is this <click> - a tutorial on combining C++20 with Lua 5.4.2 and in particular <click> I am here to offer up-to-date practical advice with working code that you can. If you google 'how to combine C++ with Lua' what you will get is a lot of hits, some relevant to today, some defunct. So the whole premise of my talk is to short-circuit all of that and to offer some guidance on how to get started without going down some rabit hole that was defunct years ago.

As part of that we are going to look at a real-world example of where combining C++ and Lua is useful. And I think it helps to have some idea of why you might want to deploy this technique in mind as we progress. Next, we are going to discuss all the juicy details of how to actually combine C++ and Lua and we are going to focus in detail on two binding technologies: Sol3 and Swig, including a C++/Lua starter project called LuaChat. Sol3 is a modern C++ to Lua binding and, as such, provides a number of really nice C++ abstractions to talk to Lua (and vice-versa), whereas, SWIG has less abstraction, but has the benefit that you can generate bindings for lots of languages from the same code, so Lua, Python, Go. As part of that we will talk about benchmarking and concurrency (two of my favourite topics) before we get down to performance advice and the conclusion.

So, if by the end of the talk, you have a better idea of how to combine modern C++ and Lua and you have some up-to-date code examples to start with, then I will have achieved my objective.

Why Combine C++ and Lua?

So, why would you want to combine C++ and Lua? In a word, it is this <click> flexibility and in three words its really this <click> flexibility post release. And in particular, what this means is <click> that the behaviour of code can be modified after it has been shipped. Now this is very powerful <click> as it allows us to cope with future unknowns <click> proactively. And I’ve emphasised ‘proactive’ for a good reason. Most companies or institutions where I have worked approach software development in a similar way, in that, there is a tacit understanding that the software development methodology is that you do some form of upfront requirements gathering, followed by a period of development, test and ship and maybe this is bundled up in an agile framework, but these are the project’s macro phases. And then code gets shipped and the view is we react to whatever comes up, so bugs, new requirements and we hope that we can react fast enough and scale to be successful. What this methodology says, is rather than wait to see what happens, we will recognise that we are going to need to respond to bug reports, change requests and new requirements upfront and we are going to engineer a piece of software that gives us the flexibility to cope with that down the line.   

So, you can add debug, explore previously unknown requirements <click>, modifications are fast, no design, implement, test, CI/CD cycle. Barrier to entry is much lower, so FAEs, Architects, Customers etc. can all write code, which if you are a bit careful in how you allow that, means that your software maintenance scales, because every little modification is not being bottlenecked through the C++ team.

Generally speaking this is a useful technique to have in your toolkit. Lua is fast, you can build it with any ANSI C compiler and its small, of the order of a few hundred kilobytes even including the libraries.

High Speed Transport

Lets look at an example. It's well known that the combination of C++ and Lua is used extensively in the games industry, but the example I am going to draw on today is from the high-end embedded networking domain, so by high-end embedded, I mean devices like high-speed networking routers, not small IoT type devices. So, the example we are going to look at is about putting long-range high-bandwidth IP radio links on fast moving vehicles, so like, trains and race cars.

Blu Wireless

Originally an IP licensing company (which built an 802.11ad MAC, PHY and software stack), now a product company. What Blu Wireless does is to provide high bandwidth IP networking across long range wireless links for a range of markets - one of which is high speed mobility, so trains, racers etc. It’s important to note that by embedded, I am really referring to high-end embedded systems - i.e. the NPUs are quad-core ARMv8s, clocked at 1.2Ghz with gigabytes of DDR, running desktop Linux. So, they are not small microcontrollers.

One of the nice things about Blu Wireless is that its very multidisciplinary, so you’ve literally got, people who wrote the RTL for the PHY and MAC sitting next to Linux driver writers, sat next to the Back-end team, sat next to the verification engineers and the PCB guys and ultimately the software guys.

Blu Wireless Units

This is what the units look like. So, you can see the train top unit which would sit on the roof of a train. Typically, there would be two of these per train (front and rear) but there may be more in the train is particularly long. The ‘in train’ units are the NPUs and are mounted in the roof space of a carriage and connect into the on-board Ethernet. Typically, a Customer Connection Unit communicates with the in-train unit to determine if the link is up (or not).

The track-side units are mounted on poles on the side of the track at a spacing of about 1km and send data via a 10Gb Ethernet fibre to a router in the station and then on to the Internet.

Video

I going to show a short second video, which I think illustrates the application quite well. There are a few things to notice: 1) train is moving quickly, 2) there is a lot of variation in the environment: reflective surfaces, weather, terrain, tunnels, stations, 3) this notion of ‘beam choreography’, that is, the sequencing of connections, disconnection and hangovers.

Connection Management

The Connection Manager is a mission critical piece of software that implements the beam choreography <click>. The first version <click> (I didn’t write this) was a monolithic C++98 application, but by all measures was done well. Over its lifetime, there were very few bugs and it took us from having nothing to having something. So, v1 implemented a simple behaviour, that is, connect to the strongest signal and hold on to that connection until the MAC tells us we’ve been disconnected. And that worked of a fashion, but geographic anomalies, RF anomalies meant that the Connection Manager would often make the wrong decision, that is, connect to the wrong access point - and those mistakes are costly, because you have network reconfiguration involved.

The other key drawback was that making changes to the Connection Manager’s behaviour was difficult. So everything time an FAE or a Technical Manager wanted to explore a hypothesis or test an idea, we (i.e. the software team) had to go through a complete: design, implement, test, deploy cycle which a) takes a long time and b) has to then involve the customer (because you cant change software on trains at will). So, improvements could not be made fast enough and this really is the crux of it, in that we couldn’t reflect our learning in the code fast enough.

Mobile Connection Manager

So, we completely redesigned our approach to connection management - the result being Mobile Connection Manager (or MCM). The key feature of MCM is the split between C++ and Lua. Actions encapsulate capabilities and I tend to name them as if they were commands, so you have Scan, Connect, Probe but you could have GPS, Influx (for sending data to an InfluxDB) or SNMP. Actions are implemented in C++ and do the heavy-lifting.

Behaviours use the Actions library as primitives and express the details of when and how to handover. The key benefit of this is that changes can be made in the field - you don’t need a compilation environment or a deployment cycle - I can just use vim on the unit to modify the behaviour, restart the service and its running. Plus, customers are far more open to this type of change - the chances of bricking the unit are zero and you can restore the original behaviour in seconds. So, we consolidate the learning into supported monthly releases.

MCM Architecture

Here is the MCM architecture. The Lua behaviour is at the top, so closest to the user, then the MCM Main files which are implemented in C++ and glue the application together. Then we’ve got a SWIG wrapper, so a hint at whats coming up and this interfaces to our library of Actions. The Actions use various APIs which interact with the Linux driver and the kernel before ultimately being passed to the MAC, PHY and the Radio.

Combining Modern C++ and Lua

Lua

What is it? It’s a lightweight very embeddable scripting language. It’s dynamically typed and runs on byte code, though you can precompile code and there are excellent JIT engines available. It has a simple syntax with an emphasis on meta-mechanisms and this is the reason that the interpreter is so small - in fact, IIRC the Lua interpreter compiles down to 280KB on Intel with an O3 build (and its about another 450KB for the libraries), so it will easily fit in L2. The key data abstraction in Lua is the ‘table’ which is a ‘map’ or associative array and when we talk about meta-mechanisms in Lua, then this is the prime example, that is, you can build any other data structure from tables e.g. arrays, trees etc.

The Lua Stack

Lua registry - regular Lua table, but global, so all C++ libraries share the same registry, which means that you have to be careful to avoid collisions.

Up values - they are like static variables in C++ which are visible only in a particular function. The association of a C++ function to its upvalues is a closure (in Lua parlance).

First Example: Lua

(Clickthroughs x 3)

This is an example of how to call a Lua function from C++ and how to call C++ from Lua. Lets start with the Lua code and by the way, these examples are all compilable and runnable. If you cut-and-paste these examples off of the slide into files, you should be able to get them running with very little effort (I’ve got some build and run instructions coming up). We create a table and define a function ‘f’ which prints out its arguments and calls a C++ function. Note that this code wont do anything if we run it in the Lua interpreter - we are simply defining ‘t’ and ‘f’.

Note, that we will use the same Lua code when we discuss Sol3 in a minute.

First Example: C++

(Clickthroughs x 3)

Here is the C++. Here is cppFunc - and all we are doing here is printing the contents of the Lua stack (bottom up). The next section is initialisation. We create a lua_State, which is an execution state and is passed around everywhere, we open the standard libraries, register cppFunc in the Lua namespace, load a file of Lua from the command line and calls the interpreter in protected mode. Protected mode means that errors are caught. The 0 relates to a stack index where you can pass an error handling function.

Now, lets call a Lua function.

<explain stack calls>

First Example: Build and Run

(Clickthroughs x 2)

<explain build instructions>

Sol3: Binding Modern C++ and Lua

So hopefully that has given you some idea of how the low-level Lua to C++ interactions work and certainly, when you start working with Sol and looking at SWIG wrappers, an understanding of how the Lua stack operates is vital.

Let’s look at an abstraction <click>

Sol3

<click> Bit of history, in the beginning there was Sol (the complement to Lua’s moon) - a C++ library for binding C++ to Lua by Danny Rapptz. And that was successful and built up a good user base, then the maintainer-ship transferred to JeanHeyd Meneide in 2013 and this led to the development of Sol2.

<click through and discuss>

Sol3: Stack Manipulation

Let’s briefly remind ourselves of what the code looks like if we are using the Lua C API.

<navigate to: First Example: C++> the main function is 25 lines of code, there are magic numbers and the code feels a bit fragile and tricky to maintain especially if you have a lot of this code.

<navigate to: Sol3: Stack Manipulation> <click to highlight main function>. Immediately we notice that main has now reduced to 15 lines, so we’ve saved 10 lines of code. The other qualitative aspect is that the readability has improved massively. <Talk through code>. <click> Also, you can see that I have left the original ‘cppFunc’ in place and I haven’t touched the Lua code. So, this is one of the nice upgrade features that Sol provides.

Sol3: Improved Example

Now, I can refine cppFunc, so now I can use modern C++ types and I can export the function into the Lua space. And, I still haven’t changed the Lua.

Sol3 Example: Build & Run

<click> Describe package installation, highlight building from source being easy and good to get connected by source.

<click through and explain>

Sol3: Container Example

Here’s a more complex example. Let’s say we want to create a container of messages in C++ and provide those facilities to Lua which will implement a behaviour. In this case, we are going to define a message as a string with a timestamp (which is also represented as a string - to be human readable). But, there’s an additional requirement, in that, we want to timestamps to be human readable, but with microsecond resolution. 

<click>. So the first thing I am going to point out is that this example uses Howard Hinnant’s excellent date library, which, if you haven’t looked at, I would highly recommend - its on Howard’s github. 

If we look at the type, the first thing we do is to define some type aliases and declare a private vector of messages. <click> This signature, whilst being useful in its own right, signals to Sol that this is a container type, and what Sol does is under the covers, it sets up the Lua metatabling so that this type works as a Lua table. Now lets look at this add_msg method.

<explain add_msg method>

<explain main> Point out that using Raw string literals is a nice way to add unit tests / check that the interface to the code is as we would expect. 

SWIG

SWIG is a binding technology that has been actively developed since about 1996. Its very mature, stable and 

Lets look at these SWIG wrappers I keep mentioning. The stack operations that we saw in the ‘First Example’ are (to my mind) primitives, which in the context of Modern C++ you don’t necessarily want to manipulate directly. What we need is an abstraction and SWIG is a tool which provides that.

<explain bullets>

LuaChat

A while ago, Jason Turner, who was at ACCU 2019, published a C++ starter project a while ago that was very popular, so I thought I would do something similar for C++ and Lua. So, what I have done is to create a ‘starter’ application called LuaChat which you can clone from my GitHub and use as the basis for your own combined C++ and Lua projects.

<explain bullet points>

LuaChat Architectural Diagram

<explain diagram>

Mention that we will discuss the LuaChat behaviour, the SWIG input files and the Talk action in detail.

Build Instructions

Here are the build instructions. You should be able to cut-and-paste this off of the slide.
I’ve tested this on a few machines. When you run this, LuaChat should print usage. I am very happy to receive bug reports.

LuaChat SWIG CMake

(Clickthroughs x 2)

This is one possible integration of SWIG into CMake. The two things to mention here are: i) this is where you pass the SWIG input file and ii) this is where you select the target language. One nice feature is that you can generate bindings in multiple languages, for example, you can create a set of bindings for Lua to implement behaviours and you can create another set (say in Python) for integration in a test bench.

LuaChat SWIG Input

(Clickthroughs x 6)

Lets briefly look at the SWIG input file. SWIG has its own input format so a little bit of explanation here is helpful. Typically the first line of the file is the name of the module and this the name by which the library will be available in the target language, so we’ll see in a minute that there are lots of references to Actions.Talk, Actions.Timer and Actions.Log in the Lua. Next, we include support for std::string, so SWIG will just map std::string to Lua strings and vice-versa. There are analogous includes for std::vector, map etc. The next part is a piece of code that is inserted into the SWIG wrapper, so, bear in mind that what SWIG is doing is scanning your code and then generating a C++ wrapper (which binds your code to the target language) and that wrapper is then compiled. So anything code you need to make that wrapper compile should go here.

Then we include the files to scan (so the logging header) and then I am defining a macro which will wrap a function in a try-catch block and direct any exceptions to the logger.The only place where exceptions are used are in the constructors for the Actions (and those are instantiated on startup).

Typemaps

In the previous slide we saw how SWIG supports standard C++ types, but what about user defined types or types defined in C++20. The good news is that we can add support for such types in the form of typemaps, which as their name suggests, maps types in C++ to the target language.

So, lets have an example. If you start working with combinations of C++ and Lua, one of the first things people want to do is to be able to map std::function onto Lua functions and vice-versa. And this is useful for things like callbacks. So, the next example shows how we can do this.

And brief acknowledgement to Petar who provided the original version of this example, which I then hacked to fit on the slide and he pointed out the bug I had introduced.

Lua Callback: SWIG Typemap

So the first thing to point out is that if you go to my GitHub (or click the slide’s title) then you will find a GitHub gist with a complete and build able version of this example plus instructions on how to compile and run this code.

In the GitHub gist, Example::Callback is a type alias to std::function<void(void)>. The rule on line 1-3 is a typecheck rule. This allows SWIG to check the type of anything that is passed as a candidate for conversion to an Example::Callback.

Lets look at lines 5-17.

<explain code>

A SWIGLUA_REF provides a mechanism to store an object (usually a function) between calls to the interpreter.

The way to understand how this works is to flip between the SWIG input file and the wrapper. It’s a bit like when your optimising code and you flipping between the source and the assembly (although these days we just use Compiler Explorer - which is a fabulous tool).

(Line 19) One thing to note is to %include your files after the typemaps have been defined. If you %include them before you define the typemap, nothing happens.

Actions

LuaChat Actions

<click through and explain>

TCP Connections

The key issue with asynchronous TCP connections is lifetime management i.e. knowing when they can be closed. The talk Action is based on code from the Boost ASIO documentation and the reason for this is because it gives a nice approach to managing TCP connections.

So, we have a class to encapsulate a TCP connection and a std::string, which is going to contain the either the message that we want to send, or the message we have received. Then we have this factory style creation function combined with a private constructor, which initialises the socket with an io_context, which is like an executor.

And finally we have some getters for the socket and a mutable reference to the actual data.

Connection Handling

Accepting Connections

Storing Data

Lua Retrieval

<explain code>

Behaviour

Any questions?

Coroutines

I really like coroutines. For me, they are most useful when trying to make use of latency in a thread. If you are looking at a thread body, with some blocking operation in it and you are thinking that there is another part of the thread that could do useful work, then coroutines are great.

Lua coroutines are stackful, meaning that each coroutine is allocated a full execution stack. So similar to Boost.Coroutine (sometimes called fibers) - the benefit being that stackful coroutines can be suspended anywhere (so not just in the top routine). That said, stackful coroutines are memory intensive and not particularly scalable.

C++20 coroutines are stackless by comparison which means that they don’t get a full execution stack as such, but they have much smaller memory requirements and this makes them extremely scalable. So, on a desktop machine, you millions even possibly billions of stackless coroutines. The often cited drawback is that you can only suspend and resume a stackless coroutine from its top level function, though there are ways and means of mitigating that.

The other key benefit of stackless coroutines is that context switching is much faster. Gor Nishanov wrote an excellent wg21 paper on this. In fact, if you want to really understand coroutines, I would highly recommend reading through Gor’s wg21 papers (particularly, N3985 and N4402), starting around 2014 and work forward. That and the CppCon talks are the best sources of information on C++20 Coroutines that I have found.

LuaChat Behaviour

Sender Coroutine

Receiver Coroutine

Dispatcher

<explain code>

Conclusion

Performance

I just want to briefly talk about performance. So, given that these NPUs are like desktop machines, you can run perf on them. For the MCM, were not compute or I/O bound (certainly not doing anything to the traffic). The thing we are interested in profiling is responsivity to events - so things like handover time and the disruption to the users traffic.
And that really has a commercial dimension, because if the first question from a customer ‘is what bandwidth do you support and at what range?’, the second is ‘what is the handover time?’.

So, we did some profiling and the were some interesting insights that I want to share with you.

Conclusion

Questions
